negotiate_alliance_interaction = {
	category = interaction_category_diplomacy
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	send_name = negotiate_alliance_interaction
	interface_priority = 60
	desc = negotiate_alliance_interaction_desc
	greeting = positive
	notification_text = NEGOTIATE_ALLIANCE_NOTIFICATION
	is_shown = {
		scope:recipient = {
			NOT = {
				this = scope:actor
			}
			NOT = {
				is_allied_to = scope:actor
			}
			is_ruler = yes
		}
		scope:actor = {
			is_ruler = yes
			OR = {
				is_ai = no
				highest_held_title_tier >= 2
			}
			is_any_family_relation_or_spouse_trigger = {
				CHARACTER = scope:recipient
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			is_landed = yes
			is_imprisoned = no
		}
		scope:actor = {
			is_landed = yes
			is_imprisoned = no
		}
		custom_description = {
			text = "has_already_rejected_renegotiation"
			subject = scope:recipient
			NOT = {
				scope:actor = {
					has_opinion_modifier = {
						modifier = refused_alliance_opinion
						target = scope:recipient
					}
				}
			}
		}
	}
	is_valid = {
		#To give some clarity to the tooltip that states "blood ties"
		OR = {
			#Ruler has the defensive negotiations perk
			scope:actor = {
				has_perk = defensive_negotiations_perk
			}
			#Ruler is married to other ruler.
			scope:actor = {
				is_spouse_of = scope:recipient
			}
			#Ruler is close relative of other ruler (child/parent/sibling)
			scope:actor = {
				is_parent_of = scope:recipient
			}
			scope:actor = {
				is_child_of = scope:recipient
			}
			scope:actor = {
				is_sibling_of = scope:recipient
			}
			custom_description = {
				text = rulers_family_is_married_to_other_ruler_trigger
				subject = scope:recipient
				object = scope:actor
				#Ruler's child/parent/sibling/grandchild/grandparent/uncle/aunt/niece/nephew is married to other ruler.
				scope:recipient = {
					any_spouse = {
						OR = {
							is_close_family_of = scope:actor
							is_nibling_of = scope:actor
							is_uncle_or_aunt_of = scope:actor
						}
					}
				}
			}
			custom_description = {
				text = rulers_family_is_married_to_other_ruler_trigger
				subject = scope:actor
				object = scope:recipient
				#Other ruler's child/parent/sibling/grandchild/grandparent/uncle/aunt/niece/nephew is married to first ruler.
				scope:actor = {
					any_spouse = {
						OR = {
							is_close_family_of = scope:recipient
							is_nibling_of = scope:recipient
							is_uncle_or_aunt_of = scope:recipient
						}
					}
				}
			}
			custom_description = {
				text = rulers_child_parent_sibling_is_married_to_other_rulers_trigger
				subject = scope:recipient
				object = scope:actor
				# Ruler's child/parent/sibling is married to other ruler's child/parent/sibling.
				scope:actor = {
					any_close_family_member = {
						OR = {
							is_parent_of = scope:actor
							is_child_of = scope:actor
							is_sibling_of = scope:actor
						}
						any_spouse = {
							OR = {
								is_parent_of = scope:recipient
								is_child_of = scope:recipient
								is_sibling_of = scope:recipient
							}
						}
					}
				}
			}
		}
	}
	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0234
		}
	}
	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = {
			has_usable_hook = scope:recipient
		}
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_options_exclusive = no
	on_accept = {
		scope:actor = {
			trigger_event = char_interaction.0235
			stress_impact = {
				shy = minor_stress_impact_gain
			}
			if = {
				limit = {
					scope:hook = yes
					has_hook = scope:recipient
				}
				use_hook = scope:recipient
			}
		}
		scope:recipient = {
			custom_tooltip = negotiate_alliance_effect_recipient_tooltip
		}
		#Set up alliance, depending on relation between rulers.
		hidden_effect = {
			#Prioritize marriage between rulers and/or direct blood relation between rulers first.
			if = {
				limit = {
					scope:actor = {
						OR = {
							is_spouse_of = scope:recipient
							is_child_of = scope:recipient
							is_parent_of = scope:recipient
							is_sibling_of = scope:recipient
						}
					}
				}
				scope:actor = {
					create_alliance = {
						target = scope:recipient
						allied_through_owner = scope:actor
						allied_through_target = scope:recipient
					}
				}
			}
			#...Then marriage between close family members and either actor or recipient.
			else_if = {
				limit = {
					scope:recipient = {
						any_spouse = {
							OR = {
								is_close_family_of = scope:actor
								is_nibling_of = scope:actor
								is_uncle_or_aunt_of = scope:actor
							}
						}
					}
				}
				scope:recipient = {
					random_spouse = {
						limit = {
							OR = {
								is_close_family_of = scope:actor
								is_nibling_of = scope:actor
								is_uncle_or_aunt_of = scope:actor
							}
						}
						save_scope_as = recipient_spouse
					}
				}
				scope:actor = {
					create_alliance = {
						target = scope:recipient
						allied_through_owner = scope:recipient_spouse
						allied_through_target = scope:recipient
					}
				}
			}
			else_if = {
				limit = {
					scope:actor = {
						any_spouse = {
							OR = {
								is_close_family_of = scope:recipient
								is_nibling_of = scope:recipient
								is_uncle_or_aunt_of = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					random_spouse = {
						limit = {
							OR = {
								is_close_family_of = scope:recipient
								is_nibling_of = scope:recipient
								is_uncle_or_aunt_of = scope:recipient
							}
						}
						save_scope_as = actor_spouse
					}
				}
				scope:actor = {
					create_alliance = {
						target = scope:recipient
						allied_through_owner = scope:actor
						allied_through_target = scope:actor_spouse
					}
				}
			}
			#...And finally marriage between close relatives and close relatives.
			else_if = {
				limit = {
					scope:actor = {
						any_close_family_member = {
							OR = {
								is_child_of = scope:actor
								is_parent_of = scope:actor
								is_sibling_of = scope:actor
							}
							any_spouse = {
								OR = {
									is_child_of = scope:recipient
									is_parent_of = scope:recipient
									is_sibling_of = scope:recipient
								}
							}
						}
					}
				}
				scope:actor = {
					random_close_family_member = {
						limit = {
							OR = {
								is_child_of = scope:actor
								is_parent_of = scope:actor
								is_sibling_of = scope:actor
							}
							any_spouse = {
								OR = {
									is_child_of = scope:recipient
									is_parent_of = scope:recipient
									is_sibling_of = scope:recipient
								}
							}
						}
						save_scope_as = actor_spouse
						random_spouse = {
							limit = {
								OR = {
									is_child_of = scope:recipient
									is_parent_of = scope:recipient
									is_sibling_of = scope:recipient
								}
							}
							save_scope_as = recipient_spouse
						}
					}
				}
				scope:actor = {
					create_alliance = {
						target = scope:recipient
						allied_through_owner = scope:actor_spouse
						allied_through_target = scope:recipient_spouse
					}
				}
			}
			else_if = {
				limit = {
					scope:actor = {
						has_perk = defensive_negotiations_perk
					}
				}
				scope:actor = {
					create_alliance = {
						target = scope:recipient
						allied_through_owner = scope:actor
						allied_through_target = scope:recipient
					}
				}
				scope:recipient = {
					# This opinion modifier controls the interaction, and is removed when breaking the alliance in any way (though on_actions)
					add_opinion = {
						modifier = perk_negotiated_alliance_opinion
						target = scope:actor
					}
				}
			}
		}
	}
	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0236
		}
		scope:actor = {
			add_opinion = {
				modifier = refused_alliance_opinion
				target = scope:recipient
			}
		}
	}
	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}
	ai_accept = {
		base = 20
		# Tier Difference 	(+/-)
		# Inheritance 		(+)
		# Opinion 			(+/-)
		# Dynasty Prestige. (+)
		# Different Faith.	(-)
		# Liege is asking 	(+)
		# Dread 			(+)
		# Power difference 	(+/-)
		# Claimants (+/-)
		# Same House (+)
		# Declared war opinion
		# Actor is at war penalty
		# Tier Differences
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value >= 1
				}
			}
			add = {
				value = 30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 2
						}
					}
					add = 30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 3
						}
					}
					add = 60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 4
						}
					}
					add = 90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 5
						}
					}
					add = 120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value <= -1
				}
			}
			add = {
				value = -30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -2
						}
					}
					add = -30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -3
						}
					}
					add = -60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -4
						}
					}
					add = -90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -5
						}
					}
					add = -120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		modifier = {
			scope:recipient = {
				is_heir_of = scope:actor
			}
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value > 0
				}
			}
			add = {
				value = 10
				if = {
					limit = {
						scope:actor = {
							player_heir = scope:recipient
						}
					}
					add = 10
				}
			}
			desc = IS_HEIR_REASON
		}
		opinion_modifier = {
			# More likely to accept if Recipient likes the Actor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}
		modifier = {
			scope:recipient = {
				has_relation_rival = scope:actor
			}
			add = -100
			desc = WE_ARE_RIVALS
		}
		# Dynasty Prestige Levels
		modifier = {
			add = -5
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = {
				has_dynasty = yes
			}
			NOT = {
				scope:actor.dynasty = scope:recipient.dynasty
			}
			scope:actor.dynasty = {
				dynasty_prestige_level = 0
			}
		}
		modifier = {
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = {
				has_dynasty = yes
			}
			NOT = {
				scope:actor.dynasty = scope:recipient.dynasty
			}
			scope:actor.dynasty = {
				dynasty_prestige_level >= 2
			}
			add = {
				value = 10
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 3
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 4
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 5
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 6
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 7
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 8
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 9
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 10
						}
					}
					add = 5
				}
			}
		}
		modifier = {
			#Faith compatibility
			scope:recipient = {
				has_trait = zealous
			}
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value > faith_fully_accepted_level
				}
			}
			add = {
				value = 10
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_astray_level
							}
						}
					}
					subtract = 20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					subtract = 40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					subtract = 60
				}
				desc = MARRY_DIFFERENT_FAITH_REASON
			}
		}
		modifier = {
			# A Recipient is more likely to agree to an alliance requested by his liege.
			add = 40
			scope:recipient = {
				target_is_liege_or_above = scope:actor
			}
			desc = LIEGE_REASON
		}
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = {
					target_is_liege_or_above = scope:actor
				}
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = {
					target_is_liege_or_above = scope:actor
				}
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = {
			add = {
				value = 1
				subtract = {
					value = scope:recipient.max_military_strength
					divide = {
						value = scope:actor.max_military_strength
						min = 1
					}
				}
				multiply = 10
			}
			desc = offer_vassalization_interaction_aibehavior_power_tt
		}
		# Recipient is a Claimant to Actor's titles.
		modifier = {
			scope:recipient = {
				NOT = {
					has_government = clan_government
				}
				any_claim = {
					holder = scope:actor
				}
			}
			add = {
				value = -200
				if = {
					limit = {
						NOT = {
							scope:recipient.house = scope:actor.house
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						NOT = {
							scope:recipient.dynasty = scope:actor.dynasty
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						scope:recipient.dynasty = scope:actor.dynasty
						OR = {
							has_trait = bastard
							has_trait = legitimized_bastard
						}
					}
					multiply = 1.5
				}
				if = {
					# Primary heir will probably inherit the lands after the rulers death
					limit = {
						scope:recipient = {
							is_primary_heir_of = scope:actor
						}
					}
					divide = 4
				}
			}
			desc = IS_CLAIMANT_TO_ACTORS_TITLES
		}
		#Actor has claims on recipient's titles.
		modifier = {
			scope:actor = {
				any_claim = {
					holder = scope:recipient
				}
			}
			add = 25
			desc = IS_CLAIMANT_TO_RECIPIENT_TITLES
		}
		modifier = {
			scope:recipient = {
				NOT = {
					any_claim = {
						holder = scope:actor
					}
				}
			}
			scope:recipient.house = scope:actor.house
			add = 15
			desc = IS_SAME_HOUSE_REASON
		}
		modifier = {
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = declared_war
				}
			}
			add = -100
			desc = DECLARED_WAR_REASON
		}
		# Don't form new alliances with people already at war.
		modifier = {
			scope:actor = {
				is_at_war = yes
				# Since vassals and lieges can't call us into wars, this doesn't matter for us if we have that relationship. 
				NOR = {
					target_is_liege_or_above = scope:recipient
					target_is_vassal_or_below = scope:recipient
				}
			}
			add = -10
			desc = IS_AT_WAR_REASON
		}
	}
	ai_potential = {
		is_at_war = yes
	}
	ai_targets = {
		ai_recipients = dynasty
		max = 20
	}
	ai_targets = {
		ai_recipients = family
		max = 10
	}
	ai_targets = {
		ai_recipients = spouses
	}
	ai_frequency = 72
	ai_will_do = {
		base = 0
		modifier = {
			add = 100
			any_ally = {
				count < 2
			}
		}
		modifier = {
			# The AI shouldn't propose to their Lieges or Vassals
			factor = 0
			OR = {
				target_is_liege_or_above = scope:recipient
				target_is_vassal_or_below = scope:recipient
			}
		}
	}
}

perk_alliance_interaction = {
	category = interaction_category_diplomacy
	ai_min_reply_days = 4
	ai_max_reply_days = 9
	interface_priority = 60
	desc = perk_alliance_interaction_desc
	greeting = positive
	notification_text = PERK_NEGOTIATE_ALLIANCE_NOTIFICATION
	is_shown = {
		scope:recipient = {
			NOT = {
				this = scope:actor
			}
			NOT = {
				is_allied_to = scope:actor
			}
			NOT = {
				target_is_vassal_or_below = scope:actor
			}			# Can only sign with external rulers/peer vassals, though the alliance is preserved if they somehow become your vassals
			NOT = {
				target_is_liege_or_above = scope:actor
			}
			is_ruler = yes
			primary_title.tier > tier_barony
		}
		scope:actor = {
			has_perk = defensive_negotiations_perk
			NOT = {
				# This interaction is harder to push through than Negotiate Alliance, and does the same thing, so don't show both
				is_character_interaction_shown = {
					recipient = scope:recipient
					interaction = negotiate_alliance_interaction
				}
			}
		}
	}
	is_valid_showing_failures_only = {
		scope:recipient = {
			is_landed = yes
			is_imprisoned = no
		}
		scope:actor = {
			is_landed = yes
			is_imprisoned = no
		}
		custom_description = {
			text = "has_already_rejected_renegotiation"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_opinion_modifier = {
						modifier = refused_alliance_opinion
						target = scope:recipient
					}
				}
			}
		}
	}
	can_send = {
		custom_description = {
			# Exploit prevention
			text = "has_sent_interaction_already"
			subject = scope:recipient
			scope:actor = {
				NOT = {
					has_pending_interaction_of_type = perk_alliance_interaction
				}
			}
		}
	}
	on_auto_accept = {
		scope:recipient = {
			trigger_event = char_interaction.0234
		}
	}
	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = {
			has_usable_hook = scope:recipient
		}
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_options_exclusive = no
	on_accept = {
		save_scope_value_as = {
			#So that we can show the opinion gain in the response event
			name = perk_alliance_interaction
			value = yes
		}
		scope:actor = {
			custom_tooltip = negotiate_alliance_effect_tooltip
			trigger_event = char_interaction.0235
			create_alliance = {
				target = scope:recipient
				allied_through_owner = scope:actor
				allied_through_target = scope:recipient
			}
			stress_impact = {
				shy = minor_stress_impact_gain
			}
			if = {
				limit = {
					scope:hook = yes
				}
				use_hook = scope:recipient
			}
		}
		scope:recipient = {
			# This opinion modifier controls the interaction, and is removed when breaking the alliance in any way (though on_actions)
			add_opinion = {
				modifier = perk_negotiated_alliance_opinion
				target = scope:actor
			}
		}
	}
	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0236
		}
		scope:actor = {
			add_opinion = {
				modifier = refused_alliance_opinion
				target = scope:recipient
			}
		}
	}
	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}
	ai_accept = {
		# Similar to Negotiate Alliance, but without modifiers for Liege, being an heir, etc.
		base = -40
		#Trait modifiers
		modifier = {
			scope:recipient = {
				has_trait = paranoid
			}
			add = -40
		}
		modifier = {
			scope:recipient = {
				has_trait = trusting
			}
			add = 20
		}
		# Tier Differences
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value >= 1
				}
			}
			add = {
				value = 30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 2
						}
					}
					add = 30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 3
						}
					}
					add = 60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 4
						}
					}
					add = 90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = 5
						}
					}
					add = 120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		modifier = {
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value <= -1
				}
			}
			add = {
				value = -30
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -2
						}
					}
					add = -30
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -3
						}
					}
					add = -60
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -4
						}
					}
					add = -90
				}
				if = {
					limit = {
						tier_difference = {
							target = scope:recipient
							value = -5
						}
					}
					add = -120
				}
			}
			desc = RANK_DIFFERENCE_REASON
		}
		opinion_modifier = {
			# More likely to accept if Recipient likes the Actor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}
		# Dynasty Prestige Levels
		modifier = {
			add = -5
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = {
				has_dynasty = yes
			}
			NOT = {
				scope:actor.dynasty = scope:recipient.dynasty
			}
			scope:actor.dynasty = {
				dynasty_prestige_level = 0
			}
		}
		modifier = {
			desc = AI_DYNASTY_PRESTIGE_REASON
			scope:actor = {
				has_dynasty = yes
			}
			NOT = {
				scope:actor.dynasty = scope:recipient.dynasty
			}
			scope:actor.dynasty = {
				dynasty_prestige_level >= 2
			}
			add = {
				value = 10
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 3
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 4
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 5
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 6
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 7
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 8
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 9
						}
					}
					add = 5
				}
				if = {
					limit = {
						scope:actor.dynasty = {
							dynasty_prestige_level >= 10
						}
					}
					add = 5
				}
			}
		}
		modifier = {
			#Faith compatibility
			scope:recipient = {
				has_trait = zealous
			}
			scope:recipient.faith = {
				faith_hostility_level = {
					target = scope:actor.faith
					value > faith_fully_accepted_level
				}
			}
			add = {
				value = 10
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_astray_level
							}
						}
					}
					subtract = 20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					subtract = 40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					subtract = 60
				}
			}
			desc = MARRY_DIFFERENT_FAITH_REASON
		}
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = {
					target_is_liege_or_above = scope:actor
				}
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = {
					target_is_liege_or_above = scope:actor
				}
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = {
			add = {
				value = 1
				subtract = {
					value = scope:recipient.max_military_strength
					divide = {
						value = scope:actor.max_military_strength
						min = 1
					}
				}
				multiply = 10
			}
			desc = offer_vassalization_interaction_aibehavior_power_tt
		}
		# Recipient is a Claimant to Actor's titles.
		modifier = {
			scope:recipient = {
				any_claim = {
					holder = scope:actor
				}
			}
			add = {
				value = -200
				if = {
					limit = {
						NOT = {
							scope:recipient.house = scope:actor.house
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						NOT = {
							scope:recipient.dynasty = scope:actor.dynasty
						}
					}
					multiply = 2
				}
				if = {
					limit = {
						scope:recipient.dynasty = scope:actor.dynasty
						OR = {
							has_trait = bastard
							has_trait = legitimized_bastard
						}
					}
					multiply = 1.5
				}
				if = {
					# Primary heir will probably inherit the lands after the rulers death
					limit = {
						scope:recipient = {
							is_primary_heir_of = scope:actor
						}
					}
					divide = 4
				}
			}
			desc = IS_CLAIMANT_TO_ACTORS_TITLES
		}
		#Actor has claims on recipient's titles.
		modifier = {
			scope:actor = {
				any_claim = {
					holder = scope:recipient
				}
			}
			add = 25
			desc = IS_CLAIMANT_TO_RECIPIENT_TITLES
		}
		modifier = {
			scope:recipient = {
				NOT = {
					any_claim = {
						holder = scope:actor
					}
				}
			}
			scope:recipient.house = scope:actor.house
			add = 15
			desc = IS_SAME_HOUSE_REASON
		}
		modifier = {
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = declared_war
				}
			}
			add = -100
			desc = DECLARED_WAR_REASON
		}
	}
	ai_potential = {
		is_at_war = yes
	}
	ai_targets = {
		ai_recipients = neighboring_rulers
		max = 10
	}
	ai_targets = {
		ai_recipients = peer_vassals
		max = 5
	}
	ai_frequency = 72
	ai_will_do = {
		base = 0
		modifier = {
			add = 100
			any_ally = {
				count < 2
			}
		}
	}
}
